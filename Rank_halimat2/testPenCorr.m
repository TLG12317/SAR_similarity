%%
%%-----------------------------------------
%%% Generate matrix G
%%-----------------------------------------
%%
LongCorr = 0.5; 
beta     = -0.05;
%G = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.7071067690849304, 0.5773502588272095, 0.7071067690849304, 0.7071067690849304, 0.5], [0.0, 0.7071067690849304, 1.0000001192092896, 0.8164966106414795, 0.5000000596046448, 0.5000000596046448, 0.7071067690849304], [0.0, 0.5773502588272095, 0.8164966106414795, 1.0, 0.8164966106414795, 0.8164966106414795, 0.866025447845459], [0.0, 0.7071067690849304, 0.5000000596046448, 0.8164966106414795, 1.0000001192092896, 0.5000000596046448, 0.7071067690849304], [0.0, 0.7071067690849304, 0.5000000596046448, 0.8164966106414795, 0.5000000596046448, 1.0000001192092896, 0.7071067690849304], [0.0, 0.5, 0.7071067690849304, 0.866025447845459, 0.7071067690849304, 0.7071067690849304, 1.0]
%n = length(G);
%for i = 1:n
%    for j = 1:i        
%        G(i,j) = LongCorr + (1-LongCorr)*exp(beta*abs(i-j));        
%    end
%end
%G = G + G' - diag(diag(G));


%obtain the matrix from the text file

formatSpec = '%f';
fileID = fopen('temp.txt','r');
fileID2 = fopen('temp2.txt', 'r');
B = fscanf(fileID2, formatSpec);

sizeA = [B Inf];

A = fscanf(fileID,formatSpec,sizeA);

G = A'

%G = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; ...
%      0.0, 1.0, 0.7071067690849304, 0.5773502588272095, 0.7071067690849304, 0.7071067690849304, 0.5 ; ...
%      0.0, 0.7071067690849304, 1.0000001192092896, 0.8164966106414795, 0.5000000596046448, 0.5000000596046448, 0.7071067690849304 ; ...
%      0.0, 0.5773502588272095, 0.8164966106414795, 1.0, 0.8164966106414795, 0.8164966106414795, 0.866025447845459 ; ...
%      0.0, 0.7071067690849304, 0.5000000596046448, 0.8164966106414795, 1.0000001192092896, 0.5000000596046448, 0.7071067690849304 ; ...
%      0.0, 0.7071067690849304, 0.5000000596046448, 0.8164966106414795, 0.5000000596046448, 1.0000001192092896, 0.7071067690849304 ; ...
%      0.0, 0.5, 0.7071067690849304, 0.866025447845459, 0.7071067690849304, 0.7071067690849304, 1.0];

G = (G + G')/2;       % this symmetrizes the matrix
n = length(G);
G = G-diag(diag(G)) + eye(n); % this sets all the diagonal elements to one

%%% The rank constraint
r_rank = 7;



%% I_e,J_e
%%%% for fixed  diagonal entries
I_e = [1:1:n]';
J_e = I_e;
k_e = length(I_e);


%% to generate the bound e,l & u
%%%%%%% e
rhs = ones(n,1);  % diagonal elements
alpha0 = 1;
rhs = alpha0*rhs + (1-alpha0)*rand(n,1);
e = rhs;
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 ConstrA.e = e; ConstrA.Ie = I_e; ConstrA.Je = J_e;
 
 
 
 
 
fprintf('\n---------- Call PenCorr.m ----------------\n')
OPTIONS.tau    = 0;
OPTIONS.tolrel = 1.0e-5;
[X,INFOS] = PenCorr(G,ConstrA,r_rank,OPTIONS);
